PHP.ini Configuration
allow_url_fopen = 0
Positive Impact: Prevents the use of URL-aware fopen wrappers, reducing the risk of code injection and remote file inclusion vulnerabilities.
Negative if Not Implemented: Potentially allows remote file execution or data leakage.
Use Case: Prevents PHP scripts from opening files through network protocols like HTTP or FTP. This is crucial because allowing remote file opening can lead to code injection attacks where an attacker could specify a remote file URL that executes malicious code on your server.

allow_url_include = 0
Positive Impact: Disables inclusion of files from remote locations, further reducing the risk of remote code execution.
Negative if Not Implemented: Increases the risk of including malicious files from remote servers.
Use Case: Disables the ability to include PHP files from remote servers. This is essential to prevent Remote File Inclusion (RFI) attacks, where attackers could execute arbitrary scripts on your server by including remote files.

max_input_time = 30 & max_execution_time = 30
Positive Impact: Limits the time for script input processing and execution, mitigating long-running script attacks or DoS attacks.
Negative if Not Implemented: Vulnerable to scripts that run indefinitely, causing performance degradation or server crashes.
Use Case: Sets a time limit for data input and script execution. This protects against Denial of Service (DoS) attacks that exploit long-running scripts to overwhelm the server.

memory_limit = 8M
Positive Impact: Caps the memory usage by scripts, preventing resource exhaustion.
Negative if Not Implemented: Scripts could consume excessive memory, leading to server instability.
Use Case: Limits the memory that a script can consume, preventing poorly written scripts or intentionally malicious scripts from using too much server memory, which could lead to server crashes or slowdowns.

register_globals = off
Positive Impact: Prevents the automatic creation of global variables from request data, mitigating risks of unauthorized data manipulation.
Negative if Not Implemented: Increases the risk of security exploits through global variables.
Use Case: Ensures that external variables (like input from forms) aren't registered as global variables. This prevents attacks that exploit these globals to overwrite important variables and breach security.

expose_php = 0
Positive Impact: Hides PHP version information, making it harder for attackers to target specific PHP vulnerabilities.
Negative if Not Implemented: Exposes PHP version, aiding attackers in identifying exploitable vulnerabilities.
Use Case: Hides the PHP version in HTTP headers, obscuring potential known vulnerabilities from attackers looking to exploit specific PHP versions.

cgi.force_redirect = 1
Positive Impact: Ensures PHP scripts can only be executed through a web server, preventing direct script access.
Negative if Not Implemented: Direct access to PHP scripts could be used to bypass security measures.
Use Case: Ensures PHP scripts can't be executed directly, bypassing security settings. This is particularly important when PHP is running as a CGI.

post_max_size = 256K
Positive Impact: Limits POST request size, protecting against denial-of-service and large payload attacks.
Negative if Not Implemented: Vulnerable to attacks that overwhelm server resources through large POST requests.
Use Case: Limits the size of POST data to protect against attacks that send large amounts of data in an attempt to crash or destabilize the server.

max_input_vars = 100
Positive Impact: Limits the number of input variables, defending against attacks aimed at overwhelming the script.
Negative if Not Implemented: Susceptible to attacks exploiting large numbers of input variables.
Use Case: Limits the number of input variables, defending against attacks that may use large numbers of variables to bypass PHPâ€™s max_input_vars limitations, leading to variable overwrites.

display_errors = 0 & display_startup_errors = 0
Positive Impact: Prevents error details from being displayed to users, avoiding information leakage.
Negative if Not Implemented: Reveals sensitive information through error messages, aiding in attack planning.
Use Case: Prevents error messages from being displayed to users, protecting sensitive information that errors might reveal about the server environment or application.

log_errors = 1
Positive Impact: Logs errors for server admin review, aiding in troubleshooting and security monitoring.
Negative if Not Implemented: Missed opportunity to detect and analyze errors or potential security breaches.
Use Case: Ensures errors are logged, enabling the tracking and diagnosing of issues without exposing details to users.

error_log = /path/to/error_log
Positive Impact: Specifies a secure location for error logging, centralizing and securing error data.
Negative if Not Implemented: Could lead to scattered or insecure error logging.
Use Case: Specifies a path for error logs, centralizing error information for easier monitoring and analysis.

open_basedir = "/path/to/directory"
Positive Impact: Restricts PHP file access to specified directories, preventing unauthorized filesystem access.
Negative if Not Implemented: Scripts may access sensitive areas of the filesystem, leading to data leakage or manipulation.
Use Case: Restricts PHP's access to specific directories, enhancing security by preventing scripts from accessing or executing files outside these directories.

file_uploads = 0 or 1
Positive Impact: Disabling file uploads eliminates the risk of malicious file uploads; enabling it with restrictions mitigates risks.
Negative if Not Implemented: Unrestricted file uploads could lead to the server being compromised.
Use Case: Controls file upload functionality. Disabling it completely can be a crucial step in environments where file uploads aren't needed and pose a security risk.

upload_max_filesize = 1M
Positive Impact: Limits the size of uploadable files, reducing the impact of file upload vulnerabilities.
Negative if Not Implemented: Large or malicious files could be uploaded, posing a security risk.
Use Case: Sets a maximum file upload size, which is crucial for preventing the upload of large, potentially harmful files that could execute malicious code or overload the filesystem.

upload_tmp_dir = /secure/tmp_upload/path
Positive Impact: Securely stores temporary file uploads, reducing the risk of tampering or unauthorized access.
Negative if Not Implemented: Default temporary directories could be less secure, exposing files to risk.
Use Case: Defines a secure temporary directory for file uploads, isolating them from other parts of the system and reducing the risk of unauthorized access or manipulation.

Session Security Settings
Positive Impact: Enhances session security, preventing session hijacking and fixation attacks.
Negative if Not Implemented: Leaves sessions more vulnerable to attack, compromising user authentication.
Use Case: Enhances the overall security of user sessions, crucial for protecting user authentication and preventing session hijacking or fixation.

disable_functions = list_of_functions
Positive Impact: Disables potentially dangerous PHP functions, reducing the risk of their exploitation.
Negative if Not Implemented: Leaves risky functions available, which could be exploited for malicious purposes.
Use Case: Disables potentially harmful PHP functions that could be exploited by attackers to execute malicious code, conduct information disclosure, or perform unauthorized system operations.

soap.wsdl_cache_dir = /secure/dir
Positive Impact: Secures the SOAP cache directory, preventing unauthorized access.
Negative if Not Implemented: Default or insecure cache locations could be exploited for information disclosure.
Use Case: Secures the directory where SOAP WSDL caching occurs, preventing unauthorized access or manipulation of cached data.





Apache httpd.conf Configuration
Remove Server Version Banner
Positive Impact: Hides Apache version, reducing the risk of targeted attacks.
Negative if Not Implemented: Exposes server information, aiding attackers.
Use Case: Conceals Apache version and operating system information, preventing attackers from easily identifying known vulnerabilities specific to your server's software versions.

Disable Directory Browser Listing
Positive Impact: Prevents listing of directory contents, reducing information exposure.
Negative if Not Implemented: Exposes directory structure, aiding attackers in finding vulnerable files.
Use Case: Prevents users from seeing a list of files in directories without a default document, reducing information disclosure that could be used in an attack.

Disable ETag
Positive Impact: Prevents ETag header leaks which could expose inode information.
Negative if Not Implemented: Possible information leakage through ETag headers.
Use Case: Disables ETag headers, which can leak inode information in certain configurations, potentially revealing sensitive information about the server filesystem.

Run Apache from a Non-privileged Account
Positive Impact: Limits the impact of a breach by using a less-privileged user.
Negative if Not Implemented: Higher risk of system-wide compromise if Apache is compromised.
Use Case: Reduces the risk of system-wide impacts in case the Apache server is compromised, as a non-privileged user has limited access.

Protect Binary and Configuration Directory Permission
Positive Impact: Enhances security of critical directories.
Negative if Not Implemented: Potential unauthorized access to sensitive configurations.
Use Case: Tightens the security of critical directories, preventing unauthorized users from viewing or modifying sensitive Apache configurations or binaries.

System Settings Protection
Positive Impact: Prevents .htaccess override, maintaining server settings integrity.
Negative if Not Implemented: Possible unauthorized modification of server settings.
Use Case: Prevents local users from using .htaccess files to override global server settings, maintaining the integrity and security of the server configuration.

Restrict HTTP Request Methods
Positive Impact: Limits attack surface by allowing only necessary HTTP methods.
Negative if Not Implemented: Unused HTTP methods could be exploited.
Use Case: Limits the types of HTTP methods the server will accept, mitigating the risk of methods like TRACE or PUT being exploited in attacks.

Disable TRACE HTTP Request
Positive Impact: Prevents Cross-Site Tracing attacks.
Negative if Not Implemented: Potential vulnerability to Cross-Site Tracing.
Use Case: Prevents the TRACE method from being used in Cross-Site Tracing (XST) attacks, which can be used to steal sensitive information like cookies.

Set Cookie with HttpOnly and Secure Flag
Positive Impact: Enhances cookie security, mitigating XSS attacks.
Negative if Not Implemented: Cookies more vulnerable to hijacking and XSS attacks.
Use Case: Enhances cookie security, making it more difficult for attackers to hijack sessions or perform cross-site scripting (XSS) attacks.

Prevent Clickjacking Attack
Positive Impact: Prevents clickjacking by controlling frame embedding.
Negative if Not Implemented: Vulnerability to clickjacking attacks.
Use Case: Reduces the risk of clickjacking by preventing your web pages from being embedded in frames or iframes on malicious sites.

Disable Server Side Include (SSI)
Positive Impact: Reduces server load and attack surface.
Negative if Not Implemented: Potential for SSI attacks.
Use Case: Protects against server-side include attacks, where attackers could exploit SSI to execute commands on the server.

Enable X-XSS Protection
Positive Impact: Adds a layer of protection against XSS attacks.
Negative if Not Implemented: Less protection against certain XSS vulnerabilities.
Use Case: Adds an extra layer of defense against cross-site scripting attacks, complementing other security measures.

Disable HTTP 1.0 Protocol
Positive Impact: Mitigates older protocol vulnerabilities.
Negative if Not Implemented: Older protocol vulnerabilities could be exploited.
Use Case: Mitigates vulnerabilities associated with older HTTP protocols, reinforcing the security of web communications.

Configure Timeout Value
Positive Impact: Reduces risk of Slowloris attacks.
Negative if Not Implemented: Vulnerability to DoS attacks via slow connections.
Use Case: Protects against slow HTTP DoS attacks like Slowloris, where connections are kept open by sending partial requests.

Configure SSL Settings
Positive Impact: Enhances SSL/TLS security, protecting data in transit.
Negative if Not Implemented: Potential vulnerabilities in SSL/TLS connections.
Use Case: Secures data in transit, protecting sensitive information from being intercepted, especially crucial for sites handling personal or financial data.

Implement Mod Security
Positive Impact: Adds Web Application Firewall protection.
Negative if Not Implemented: Missed protection against various web application attacks.
Use Case: Adds a robust layer of security with a Web Application Firewall (WAF), protecting against a wide range of web application attacks.

General Configuration
Positive Impact: Optimizes security and performance.
Negative if Not Implemented: Potential security gaps and inefficiencies.
Use Case: Optimizes server performance and security, ensuring the server runs efficiently and securely.


















https://people.planetpostgresql.org/devrim/index.php?/archives/117-How-To-Build-Your-Own-PostgreSQL-and-related-software-RPMs-on-RHELRockyFedora.html


















%define version 14.10
%define release 10
Summary: PostgreSQL relational database management system
Name: postgresql
Version: %{version}
Release: %{release}
License: PostgreSQL
URL: https://www.postgresql.org/
Source0: https://ftp.postgresql.org/pub/source/v%{version}/postgresql-%{version}.tar.gz
BuildRequires: readline-devel zlib-devel
%description
PostgreSQL is an advanced object-relational database management system (DBMS).
%prep
%setup -q -n postgresql-%{version}
%build
./configure
make
%install
make install DESTDIR=%{buildroot}
%files
%{_prefix}/bin/*
%{_prefix}/include/*
%{_prefix}/lib/*
%{_prefix}/share/man/man1/*


rpmbuild -ba ~/rpmbuild/SPECS/postgresql.spec


File not found by glob: /home/ec2-user/rpmbuild/BUILDROOT/postgresql-14.10-10.x86_64/usr/bin/*
    File not found by glob: /home/ec2-user/rpmbuild/BUILDROOT/postgresql-14.10-10.x86_64/usr/include/*
    File not found by glob: /home/ec2-user/rpmbuild/BUILDROOT/postgresql-14.10-10.x86_64/usr/share/man/man1/*






%define version 14.10
%define release 10
Summary: PostgreSQL relational database management system
Name: postgresql
Version: %{version}
Release: %{release}
License: PostgreSQL
URL: https://www.postgresql.org/
Source0: https://ftp.postgresql.org/pub/source/v%{version}/postgresql-%{version}.tar.gz
BuildRequires: readline-devel zlib-devel

%description
PostgreSQL is an advanced object-relational database management system (DBMS).

%prep
%setup -q -n postgresql-%{version}

%build
./configure --prefix=%{_prefix}
make

%install
make install DESTDIR=%{buildroot}

%files
%{_prefix}/bin/*
%{_prefix}/include/*
%{_prefix}/lib/*
%{_prefix}/share/man/man1/*




error: File not found by glob: /home/ec2-user/rpmbuild/BUILDROOT/postgresql-14.10-10.x86_64/usr/share/man/man1/*



%define version 14.10
%define release 10
Summary: PostgreSQL relational database management system
Name: postgresql
Version: %{version}
Release: %{release}
License: PostgreSQL
URL: https://www.postgresql.org/
Source0: https://ftp.postgresql.org/pub/source/v%{version}/postgresql-%{version}.tar.gz
BuildRequires: readline-devel, zlib-devel

%description
PostgreSQL is an advanced object-relational database management system (DBMS).

%prep
%setup -q -n postgresql-%{version}

%build
./configure --prefix=%{_prefix}
make

%install
make install DESTDIR=%{buildroot}

%files
%{_prefix}/bin/*
%{_prefix}/include/*
%{_prefix}/lib/*
# Conditionally include man pages if they exist
%exclude %{_prefix}/share/man/man1/*




```bash
# Install Prerequisites
sudo dnf install rpm-build make gcc libtool
# Download PostgreSQL Source Code
wget https://ftp.postgresql.org/pub/source/v14.1/postgresql-14.1.tar.gz
# Prepare RPM Building Environment
mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
# Create Spec File
cat <<EOL > ~/rpmbuild/SPECS/postgresql.spec
%define version 14.10
%define release 10
Summary: PostgreSQL relational database management system
Name: postgresql
Version: %{version}
Release: %{release}
License: PostgreSQL
URL: https://www.postgresql.org/
Source0: https://ftp.postgresql.org/pub/source/v%{version}/postgresql-%{version}.tar.gz
BuildRequires: readline-devel, zlib-devel

%description
PostgreSQL is an advanced object-relational database management system (DBMS).

%prep
%setup -q -n postgresql-%{version}

%build
./configure --prefix=%{_prefix}
make

%install
make install DESTDIR=%{buildroot}

%files
%{_prefix}/bin/*
%{_prefix}/include/*
%{_prefix}/lib/*
# Conditionally include man pages if they exist
%exclude %{_prefix}/share/man/man1/*
EOL
# Place Source Code
mv postgresql-14.1.tar.gz ~/rpmbuild/SOURCES/
# Build RPMs
rpmbuild -ba ~/rpmbuild/SPECS/postgresql.spec
# Install Resulting RPMs
sudo dnf install ~/rpmbuild/RPMS/x86_64/postgresql-14.1-1.fc33.x86_64.rpm
```


# #Save Record In Route53 -- dmz-sqd-ep--
resource "aws_route53_record" "dmz-sqd-ep" {
  provider = aws.r53
  count = 1  
  zone_id = data.aws_route53_zone.ppe_hosted_zone.zone_id
  name    = "proxy2-d"
  type    = "CNAME"
  ttl     = 300
  records = [aws_vpc_endpoint.dmz-sqd-ep[count.index].dns_name]
}
Error: Unsupported attribute â”‚ â”‚   on R... by Garg, Anshul
Garg, Anshul
6:06 PM
Error: Unsupported attribute
â”‚
â”‚   on Resources\route53.tf line 171, in resource "aws_route53_record" "dmz-sqd-ep":
â”‚  171:   records = [aws_vpc_endpoint.dmz-sqd-ep[count.index].dns_name]
â”‚     â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
â”‚     â”‚ aws_vpc_endpoint.dmz-sqd-ep is tuple with 1 element
â”‚     â”‚ count.index is 0
â”‚
â”‚ This object does not have an attribute named "dns_name".

has context menu
records = [aws_vpc_endpoint.dmz-sqd-ep[count.index].dns_entry[0].dns_name]








#!/bin/bash

# Function to handle errors
error_handler() {
    echo "ERROR: Script failed at line $1"
    exit 1
}

# Trap any error and call error_handler
trap 'error_handler $LINENO' ERR

echo "Starting RPM build process for PostgreSQL..."

# Install Prerequisites
echo "Installing prerequisites..."
sudo yum install -y rpm-build make gcc libtool wget || error_handler $LINENO

# Download PostgreSQL Source Code
echo "Downloading PostgreSQL source code..."
wget https://ftp.postgresql.org/pub/source/v14.1/postgresql-14.1.tar.gz || error_handler $LINENO

# Prepare RPM Building Environment
echo "Preparing RPM building environment..."
mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS} || error_handler $LINENO

# Create Spec File
echo "Creating spec file..."
cat <<EOL > ~/rpmbuild/SPECS/postgresql.spec
%define version 14.1
%define release 1
Summary: PostgreSQL relational database management system
Name: postgresql
Version: %{version}
Release: %{release}
License: PostgreSQL
URL: https://www.postgresql.org/
Source0: https://ftp.postgresql.org/pub/source/v%{version}/postgresql-%{version}.tar.gz
BuildRequires: readline-devel, zlib-devel

%description
PostgreSQL is an advanced object-relational database management system (DBMS).

%prep
%setup -q -n postgresql-%{version}

%build
./configure --prefix=%{_prefix}
make

%install
make install DESTDIR=%{buildroot}

%files
%{_prefix}/bin/*
%{_prefix}/include/*
%{_prefix}/lib/*
# Conditionally include man pages if they exist
%exclude %{_prefix}/share/man/man1/*
EOL || error_handler $LINENO

# Place Source Code
echo "Placing source code in build environment..."
mv postgresql-14.1.tar.gz ~/rpmbuild/SOURCES/ || error_handler $LINENO

# Build RPMs
echo "Building RPMs..."
rpmbuild -ba ~/rpmbuild/SPECS/postgresql.spec || error_handler $LINENO

# Install Resulting RPMs
echo "Installing resulting RPMs..."
sudo yum localinstall ~/rpmbuild/RPMS/x86_64/postgresql-14.1-1.x86_64.rpm || error_handler $LINENO

echo "PostgreSQL RPM build and installation complete."




Preparing RPM building environment...
Creating spec file...
install.sh: line 73: warning: here-document at line 28 delimited by end-of-file (wanted `EOL')
